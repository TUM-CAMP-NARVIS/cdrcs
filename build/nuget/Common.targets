<?xml version="1.0" encoding="utf-8"?>
<!--
*   Consume .bond files and produce C# types
*
*   (Dependencies are defined by Bond.CSharp.props.  Be sure to import that first)
*   Dependencies:
*     $BOND_INCLUDE_PATH   : Bond provided imports
*     $BOND_COMPILER_PATH  : Path to directory containing gbc.exe
*
*   User-Defines:
*     @BondCodegen         : A Bond IDL file (usually with a .bond extension) to compile
*       %Options           : Any gbc options unique to this file (prefer $BondOptions than per-file)
*     @BondImportDirectory : Directory for other schemas imported within a .bond file
*     $BondOutputDirectory : Output directory for the generated files, by default IntermediateOutputPath
*     $BondOptions         : Additional options to pass to the gbc generator
*     $BondCodegenMode     : Code generation mode for gbc.exe to use (default c#)
*
*   These targets understand the structs switch that can be passed
*   to gbc and adjust the files that are added to the Compile item as
*   needed.
-->
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Set sensible defaults. -->
  <PropertyGroup>
    <BondOptions Condition=" '$(BondOptions)' == '' "></BondOptions>
    <BondCodegenMode Condition="'$(BondCodegenMode)' == ''">c#</BondCodegenMode>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <!-- Hide these from the VS project view -->
    <BondImportDirectory>
      <Visible>false</Visible>
    </BondImportDirectory>
  </ItemDefinitionGroup>

  <!-- Let Visual Studio up to 2015 know about the BondCodegen item so it can display
       it in the UI as a potential action for files. -->
  <ItemGroup>
    <AvailableItemName Include="BondCodegen" />
  </ItemGroup>

  <!-- In Visual Studio 2017+, some .NET projects (e.g., .NET Core) use the
       Common Project System (CPS) instead of AvailableItemName to make
       items and actions visible in the UI. Tell Visual Studio where to find
       these metadata definitions.-->
  <ItemGroup>
    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)cps\ProjectItemsSchema.xaml">
      <Context>File;BrowseObject;</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)cps\BondCodegen.xaml">
      <Context>File;BrowseObject;</Context>
    </PropertyPageSchema>
    <PropertyPageSchema Include="$(MSBuildThisFileDirectory)cps\BondImportDirectory.xaml">
      <Context>File;BrowseObject;</Context>
    </PropertyPageSchema>
  </ItemGroup>

  <!-- Attempt to find gbc in a platform-agnostic way. -->
  <PropertyGroup>
    <_PreExistingBondExe></_PreExistingBondExe>
    <_PreExistingBondExe Condition="Exists('$(BOND_COMPILER_PATH)\gbc.exe')">$(BOND_COMPILER_PATH)\gbc.exe</_PreExistingBondExe>
    <_PreExistingBondExe Condition="Exists('$(BOND_COMPILER_PATH)\gbc')">$(BOND_COMPILER_PATH)\gbc</_PreExistingBondExe>
  </PropertyGroup>

  <!-- Some versions of Visual Studio have an additional up-to-date check
       that is performed on a subset of files before invoking MSBuild. We
       need to add gbc as an input to the Visual Studio up-to-date check as
       well. -->
  <ItemGroup>
    <UpToDateCheckInput Include="$(_PreExistingBondExe)" />
  </ItemGroup>


  <PropertyGroup>
    <_bond_common_targets_imported>true</_bond_common_targets_imported>
  </PropertyGroup>
</Project>
